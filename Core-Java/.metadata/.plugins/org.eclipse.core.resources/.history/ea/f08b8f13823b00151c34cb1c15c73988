import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class KPaths {

    private static final int MAX_VERTICES = 1000;

    private static int[][] dp;
    private static List<ArrayList<Integer>> incommingVertices = new ArrayList<ArrayList<Integer>>();
    private static List<ArrayList<Integer>> outgoingVertices = new ArrayList<ArrayList<Integer>>();

    public static void main(String[] args) {

        for (int i = 0; i <= MAX_VERTICES; i++) {
            outgoingVertices.add(new ArrayList<Integer>());
            incommingVertices.add(new ArrayList<Integer>());
        }

        dp = new int[MAX_VERTICES + 1][MAX_VERTICES + 1];

        Scanner s = new Scanner(System.in);
        int edges = s.nextInt();

        for (int i = 0; i < edges; i++) {
            int from = s.nextInt() + 1;
            int to = s.nextInt() + 1;

            incommingVertices.get(from).add(to);
            outgoingVertices.get(to).add(from);
        }

        int startingVertex = s.nextInt() + 1;
        int endVertex = s.nextInt() + 1;
        int maxStep = s.nextInt();

        for (int i = 0; i < MAX_VERTICES; i++) {
            dp[0][i] = 1;
            dp[i][0] = 1;
        }

        ArrayList<Integer> currentStepVertices = new ArrayList<Integer>();
        currentStepVertices.add(startingVertex);

        for (int currentStep = 1; currentStep <= maxStep; currentStep++) {

            ArrayList<Integer> nextStepVertices = new ArrayList<Integer>();
            
            for (int i = 0; i < currentStepVertices.size(); i++) {

                int currentVertex = currentStepVertices.get(i);

                for (int j = 0; j < outgoingVertices.get(currentVertex).size(); j++) {
                    int nextVertex = outgoingVertices.get(currentVertex).get(j);
                    nextStepVertices.add(nextVertex);

                    dp[currentStep][currentVertex] += dp[currentStep - 1][nextVertex];
                }
            }
            
            currentStepVertices = nextStepVertices;
        }

        System.out.println(dp[endVertex][maxStep]);
    }
}
