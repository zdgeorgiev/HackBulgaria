import java.util.ArrayList;

public class Heap {

    private ArrayList<Integer> data;

    public Heap(int[] data) {

        for (int i = 0; i < data.length; i++) {
            this.data.add(data[i]);
        }

        this.heapify(this.data.size());
    }

    public void add(int number) {

    }

    public void sort(int[] sequence) {

        int size = sequence.length;

        for (int i = 0; i < sequence.length; i++) {

            this.swap(0, size - 1);

            this.siftDown(0, size - 1);

            size--;
        }
    }

    private void heapify(int size) {

        for (int i = size / 2 - 1; i >= 0; i--) {
            siftDown(i, size);
        }
    }

    private void swap(int i, int j) {
        int temp = this.data.get(i);
        this.data.set(i, this.data.get(j));
        this.data.set(j, temp);
    }

    private void siftDown(int parentIndex, int size) {

        for (int i = parentIndex; i <= size / 2 - 1; i++) {
            int currentParent = this.data[i];

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

            int maxChildIndex = i;

            if (leftChildIndex != -1 && rightChildIndex != -1) {
                maxChildIndex = this.data[leftChildIndex] < this.data[rightChildIndex] ? rightChildIndex
                        : leftChildIndex;
            } else if (leftChildIndex != -1) {
                maxChildIndex = leftChildIndex;
            } else if (rightChildIndex != -1) {
                maxChildIndex = rightChildIndex;
            }

            if (this.data[maxChildIndex] > currentParent) {
                swap(i, maxChildIndex);
                siftDown(maxChildIndex, size);
            } else {
                break;
            }
        }
    }
}
