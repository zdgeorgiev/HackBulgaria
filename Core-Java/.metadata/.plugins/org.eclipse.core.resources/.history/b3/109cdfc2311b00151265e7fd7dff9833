import java.util.ArrayList;

public class Heap {

    private ArrayList<Packet> data;
    private int size;

    public Heap() {
        this.data = new ArrayList<Packet>();
        this.size = 0;
    }

    public void push(Packet p) {
        this.data.add(p);
        this.size++;

        // swap with the first element
        swap(0, size);

        // make heapify
        this.heapify(0);
    }

    private void heapify(int index) {

        for (int i = index; i < size; i++) {

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

            int minPacketIndex = 0;

            if (leftChildIndex != -1 && rightChildIndex != -1) {

            } else if (leftChildIndex != -1) {

            } else if (rightChildIndex != -1) {

            }

            if (this.data.get(minPacketIndex).getPriority() > this.data.get(index).getPriority()) {
                swap(0, minPacketIndex);
            }
        }

    }

    public Packet pop() {
        return null;
    }

    private void swap(int i, int j) {
        Packet temp = this.data.get(i);
        this.data.set(i, data.get(j));
        this.data.set(j, temp);
    }
}
