package calculator;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class Calculator {
    private String expression;

    private Map<Character, Integer> operators;

    public Calculator() {
        this.operators = new HashMap<Character, Integer>();

        operators.put('*', 2);
        operators.put('/', 2);
        operators.put('+', 1);
        operators.put('-', 1);
    }

    public float calc() {
        return 0.0f;
    }

    private String convertToRPN(String expression) {
        StringBuilder rpn = new StringBuilder();
        Stack<Character> oprerTemp = new Stack<Character>();

        for (int i = 0; i < expression.length(); i++) {
            Character token = expression.charAt(i);

            // If the token is operator
            // - if token is with smaller or equal priority than top operator in
            // the stack
            // pop until its with bigger
            // -
            // - if token is ( push to the stack
            // - if token is ) pop all operators until find the next (
            // If the token is digit put it to the rpn

            switch (token) {
                case '*':
                    if (isBiggerPriority(token, oprerTemp.peek())) {
                        
                    }else {
                        
                    }
                    break;

                case '/':

                    if (isBiggerPriority(token, oprerTemp.peek())) {

                    }
                    break;

                case '+':

                    if (isBiggerPriority(token, oprerTemp.peek())) {

                    }
                    break;

                case '-':

                    if (isBiggerPriority(token, oprerTemp.peek())) {

                    }

                    break;

                // Its digit
                default:
                    rpn.append(token);
                    break;
            }
        }

        return null;
    }

    private boolean isBiggerPriority(char first, char second) {
        if (this.operators.get(first) <= this.operators.get(second)) {
            return false;
        }

        return true;
    }

    public String getExpression() {
        return this.expression;
    }

    public void setExpression(String expression) {
        this.expression = expression;
    }
}
