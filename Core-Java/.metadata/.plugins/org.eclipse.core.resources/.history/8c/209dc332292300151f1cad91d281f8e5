import java.util.Comparator;

public class Median {

    private Heap<Integer> minHeap;
    private Heap<Integer> maxHeap;
    private Integer median;

    public Median() {
        this.minHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });

        this.maxHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1.compareTo(o2);
            }
        });
    }

    public static void main(String[] args) {
        Median m = new Median();

        // 5 6 7 4 3 10 20 30 40 50
        m.insert(5);
        m.insert(6);
        m.insert(7);
        m.insert(4);
        m.insert(3);
        m.insert(10);
        m.insert(20);
        m.insert(30);
        m.insert(40);
        m.insert(50);
    }

    // inserts the number and returns the median
    public void insert(Integer number) {

        if (this.median == null) {
            minHeap.insert(number);
            this.median = number;
        } else {
            if (number >= this.median) {

                if (this.minHeap.getSize() - 1 == this.maxHeap.getSize()) {
                    this.maxHeap.insert(this.minHeap.pop());
                    this.minHeap.insert(number);
                    this.median = this.minHeap.peek();
                } else {
                    this.minHeap.insert(number);
                }
            } else {

                if (this.minHeap.getSize() == this.maxHeap.getSize()) {
                    this.minHeap.insert(this.maxHeap.pop());
                    this.maxHeap.insert(number);
                    this.median = this.minHeap.peek();
                } else {
                    this.minHeap.insert(number);
                }
            }
        }

        System.out.println(this.median);
    }
}
