import java.util.ArrayList;
import java.util.Scanner;

public class BinaryIndexedTree {

    public static class BirthdayRanges {

        private BinaryIndexedTree data;
        private int[] birthday = new int[366];

        public BirthdayRanges(ArrayList<Integer> birthdays) {

            ArrayList<Integer> birthdaysHistogram = this.getHistogram(birthdays);
            this.data = new BinaryIndexedTree(birthdaysHistogram, this.birthday.length);
        }

        // adds people who are born on a specific day
        public void add(int day, int numberOfPeople) {
            this.data.add(day, numberOfPeople);
        }

        // removes people who are born on a specific day
        public void remove(int day, int numberOfPeople) {
            this.data.remove(day, numberOfPeople);
        }

        // returns the number of people born in a range
        public int count(int startDay, int endDay) {
            return this.data.count(endDay) - this.data.count(startDay - 1);
        }

        private ArrayList<Integer> getHistogram(ArrayList<Integer> data) {
            for (int i = 0; i < data.size(); i++) {
                this.birthday[data.get(i)]++;
            }

            ArrayList<Integer> histogram = new ArrayList<Integer>();

            for (int i = 0; i < this.birthday.length; i++) {
                histogram.add(this.birthday[i]);
            }

            return histogram;
        }
    }

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        int size = s.nextInt();
        int commands = s.nextInt();

        ArrayList<Integer> list = new ArrayList<Integer>();

        for (int i = 0; i < size; i++) {
            list.add(s.nextInt());
        }

        BirthdayRanges b = new BinaryIndexedTree.BirthdayRanges(list);

        for (int i = 0; i < commands; i++) {
            String command = s.next();

            switch (command) {
                case "add":
                    int day = s.nextInt();
                    int count = s.nextInt();

                    b.add(day, count);
                    break;

                case "remove":

                    break;

                default:
                    break;
            }
        }
    }

    private int[] data;

    public BinaryIndexedTree(ArrayList<Integer> inputData, int leafsCount) {
        int usedNodes = leafsCount * 2 - 1;
        int totalNodesRequired = 1;

        while (usedNodes > totalNodesRequired) {
            totalNodesRequired *= 2;
        }

        // make complete binary tree
        this.data = new int[totalNodesRequired - 1];

        this.buildBIT(inputData);
    }

    private void buildBIT(ArrayList<Integer> inputData) {
        this.fillFirstLayer(inputData);

        for (int i = this.data.length / 2 - 1; i >= 0; i--) {

            // fill each node with the sum of its childs
            this.data[i] = this.data[2 * i + 1] + this.data[2 * i + 2];
        }
    }

    private void fillFirstLayer(ArrayList<Integer> inputData) {

        for (int i = 0; i < inputData.size(); i++) {
            this.data[this.data.length / 2 + i] = inputData.get(i);
        }
    }

    public void add(int index, int amount) {

        int changegChildIndex = this.data.length / 2 + index;
        this.data[changegChildIndex] += amount;

        while (changegChildIndex != 0) {

            // update the value of the parent
            int parentIndex = (changegChildIndex - 1) / 2;
            this.data[parentIndex] = this.data[2 * parentIndex + 1] + this.data[2 * parentIndex + 2];
            changegChildIndex = parentIndex;
        }
    }

    public void remove(int index, int amount) {

        int changedChildIndex = this.data.length / 2 + index;
        this.data[changedChildIndex] -= amount;

        if (this.data[changedChildIndex] < 0) {
            this.data[changedChildIndex] = 0;
        }

        while (changedChildIndex != 0) {

            // update the value of the parent
            int parentIndex = (changedChildIndex - 1) / 2;
            this.data[parentIndex] = this.data[2 * parentIndex + 1] + this.data[2 * parentIndex + 2];
            changedChildIndex = parentIndex;
        }
    }

    public int count(int upperBound) {

        int rangeCount = 0;

        // select the upperBound + 1 index
        int childIndex = this.data.length / 2 + upperBound + 1;

        while (childIndex != 0) {
            if (isRightChild(childIndex)) {
                rangeCount += this.data[childIndex - 1];
            }

            childIndex = (childIndex - 1) / 2;
        }

        return rangeCount;
    }

    private boolean isRightChild(int childIndex) {
        int parentIndex = (childIndex - 1) / 2;

        if (2 * parentIndex + 2 == childIndex) {
            return true;
        }

        return false;
    }

    @Override
    public String toString() {
        StringBuilder output = new StringBuilder();

        output.append("[");
        for (int i = 0; i < this.data.length; i++) {
            output.append(this.data[i]);

            if (i + 1 != this.data.length) {
                output.append(", ");
            }
        }
        output.append("]");

        return output.toString();
    }
}