public class Quadruplets {

    // Returns the number of quadruplets that sum to zero.
    public int zeroQuadrupletsCount(int[] a, int[] b, int[] c, int[] d) {
        
        int[] p1 = permutationSum(a, b);
        int[] p2 = permutationSum(c, d);
        
        int zeroSum = 0;
        
        for (int i = 0; i < p1.length; i++) {
            zeroSum += binarySearch(p2, p1[i] * -1);
        }

    }

    private int[] permutationSum(int[] a, int[] b) {
        int[] permutations = new int[a.length * a.length];
        int index = 0;

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < b.length; j++) {
                permutations[index] = a[i] + b[j];
                index++;
            }
        }

        return permutations;
    }
    
    private int binarySearch(ArrayList<Person> phoneBook, Integer number) {

        int low = 0;
        int high = phoneBook.size() - 1;

        while (low <= high) {

            int middle = low + (high - low) / 2;
            int currentMiddleNumber = phoneBook.get(middle).getNumber();

            if (currentMiddleNumber == number) {
                return phoneBook.get(middle).getName();
            } else if (currentMiddleNumber > number) {
                high = middle - 1;
            } else if (currentMiddleNumber < number) {
                low = middle + 1;
            }
        }

        return "";
    }
}
