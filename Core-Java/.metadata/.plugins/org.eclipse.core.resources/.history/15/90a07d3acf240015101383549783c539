import java.util.Comparator;
import java.util.Scanner;

public class Median {

    private Heap<Integer> minHeap;
    private Heap<Integer> maxHeap;
    private Integer median;
    private int balance = 0;

    private StringBuilder result = new StringBuilder();

    public Median() {
        this.minHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });

        this.maxHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1.compareTo(o2);
            }
        });
    }

    // inserts the number and returns the median
    public void insert(Integer number) {

        switch (this.balance) {
            case 0: // the two heaps have the same number of elements
                if (number < this.median) { // "<=" is just as good as "<"
                    this.maxHeap.push(number);
                    this.median = this.maxHeap.pop();
                    balance = -1;
                } else {
                    this.minHeap.push(number);
                    this.median = this.minHeap.pop();
                    balance = +1;
                }
                return;
            case +1: // BigElements has an extra element
                if (number <= this.median) { // "<=" is better than "<"
                    // this Insert brings us back into balance
                    this.maxHeap.push(number);
                } else {
                    minHeap.push(number);
                    // BigElements now has two extra elements; must rebalance
                    this.maxHeap.push(this.minHeap.pop());
                }
                balance = 0; // we’re always balanced at this point
                break; // note that CurrentMedian doesn’t change
            case -1: // SmallElements has an extra element
                if (number > this.median) {
                    this.minHeap.push(number);
                } else {
                    maxHeap.push(number);
                    this.minHeap.push(this.maxHeap.pop());
                }
                balance = 0;
                break;
        }

        result.append(this.median + "\n");
    }

    public static void main(String[] args) {
        Median m = new Median();

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        for (int i = 0; i < n; i++) {
            m.insert(s.nextInt());
        }

        System.out.println(m.result.substring(0, m.result.length() - 1));
    }
}