package heapSort;

import java.util.Arrays;

public class HeapSort {

    // Sorts a sequence of integers.
    public void sort(int[] sequence) {
        heapify(sequence, sequence.length);

        for (int i = 0; i < sequence.length - 1; i++) {

        }
        // swap first and last
        // capacity - 1 and siftdown

        System.out.println(Arrays.toString(sequence));
    }

    public static void main(String[] args) {
        HeapSort h = new HeapSort();

        h.sort(new int[] { 1, 6, 3, 7, 18, 4, 52, 13 });
    }

    private static void heapify(int[] arr, int count) {

        int size = arr.length;

        for (int i = size / 2 - 1; i >= 0; i--) {
            siftDown(i, arr.length, arr);
        }
    }

    private static void swap(int i, int j, int[] arr) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static void siftDown(int parentIndex, int size, int[] arr) {

        for (int i = parentIndex; i < size; i++) {
            int currentParent = arr[i];

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

            int minChildIndex = i;

            if (leftChildIndex != -1 && rightChildIndex != -1) {
                minChildIndex = arr[leftChildIndex] < arr[rightChildIndex] ? rightChildIndex : leftChildIndex;
            } else if (leftChildIndex != -1) {
                minChildIndex = leftChildIndex;
            } else if (rightChildIndex != -1) {
                minChildIndex = rightChildIndex;
            }

            if (arr[minChildIndex] > currentParent) {
                swap(i, minChildIndex, arr);
                siftDown(minChildIndex, size, arr);
            }
        }
    }
}