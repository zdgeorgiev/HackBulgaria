import Node;

import java.util.Scanner;

public class PhoneBook {

    public static StringBuilder output = new StringBuilder();

    public class Node {

        public PhoneBook.Contact value;
        public Node left;
        public Node right;

        public Node(PhoneBook.Contact contact) {
            this.value = contact;
            this.left = null;
            this.right = null;
        }
    }

    public static void main(String[] args) {
        PhoneBook pb = new PhoneBook();

        Scanner s = new Scanner(System.in);
        int n = s.nextInt();

        for (int i = 0; i < n; i++) {
            String command = s.next();

            switch (command) {
                case "list":
                    pb.list();
                    break;
                case "insert":
                    PhoneBook.Contact c = new Contact();
                    c.number = s.nextInt();
                    c.name = s.next();
                    pb.insert(c);
                    break;

                case "remove":
                    pb.remove(s.next());
                    break;

                default:
                    pb.lookup(s.next());
                    break;
            }
        }

        System.out.println(output.toString().trim());
    }

    public class BinarySearchTree {

        public Node head = null;

        public void insert(PhoneBook.Contact contact) {

            if (head == null) {
                this.head = new Node(contact);
            } else {

                Node headCpy = this.head;
                Node parent = null;

                while (true) {

                    parent = headCpy;

                    if (contact.name.compareTo(headCpy.value.name) > 0) {
                        headCpy = headCpy.right;

                        if (headCpy == null) {
                            parent.right = new Node(contact);
                            break;
                        }
                    } else if (contact.name.compareTo(headCpy.value.name) < 0) {
                        headCpy = headCpy.left;

                        if (headCpy == null) {
                            parent.left = new Node(contact);
                            break;
                        }
                    } else {
                        headCpy.value.number = contact.number;
                        break;
                    }
                }
            }
        }

        public Node remove(Node root, String name) {

            if (root == null)
                return null;
            else if (root.value.name.compareTo(name) > 0)
                root.left = remove(root.left, name);
            else if (root.value.name.compareTo(name) < 0)
                root.right = remove(root.right, name);
            else {
                if (root.left == null && root.right == null) {
                    if (root == this.head) {
                        this.head = null;
                        return null;
                    }

                    root = null;
                } else if (root.right != null && root.left == null) {
                    root = root.right;
                } else if (root.left != null && root.right == null) {
                    root = root.left;
                } else {
                    Node minNode = getMinNodeRightSubTree(root.right);
                    root.value = minNode.value;
                    root.right = this.remove(root.right, minNode.value.name);
                }
            }

            return root;
        }

        private Node getMinNodeRightSubTree(Node headCpy) {
            Node minNode = headCpy;

            while (minNode.left != null && minNode.value.name.compareTo(minNode.left.value.name) > 1) {
                minNode = minNode.left;
            }

            return minNode;
        }

        public void search(String name) {

            Node headCpy = this.head;

            while (headCpy != null) {

                if (headCpy.value.name.equals(name)) {
                    output.append(headCpy.value.number + "\n");
                    return;
                } else if (headCpy.value.name.compareTo(name) < 0) {
                    headCpy = headCpy.right;
                } else {
                    headCpy = headCpy.left;
                }
            }

            output.append("NOT FOUND!" + "\n");
        }

        public void getOrdered() {
            if (this.head != null) {
                this.getSubTree(this.head);
            }
        }

        private void getSubTree(Node head) {

            if (head == null) {
                return;
            }

            getSubTree(head.left);
            output.append(head.value.name + " " + head.value.number + "\n");
            getSubTree(head.right);
        }
    }

    public static class Contact {

        public String name;
        public int number;
    }

    private BinarySearchTree data;

    public PhoneBook() {
        this.data = new BinarySearchTree();
    }

    // inserts a new contact
    public void insert(Contact contact) {
        this.data.insert(contact);
    }

    // lookup a name and print its phone number
    public void lookup(String name) {
        this.data.search(name);
    }

    // list all records in an alphabetical order
    public void list() {
        this.data.getOrdered();
    }

    // remove a record for a given name
    public void remove(String name) {
        this.data.remove(this.data.head, name);
    }
}
