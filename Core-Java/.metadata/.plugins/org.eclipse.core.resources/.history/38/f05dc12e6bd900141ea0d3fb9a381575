package calculator;

import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public class Calculator {
    private String expression;

    private Map<Character, Integer> operators;

    public Calculator() {
        this.operators = new HashMap<Character, Integer>();

        operators.put('*', 2);
        operators.put('/', 2);
        operators.put('+', 1);
        operators.put('-', 1);
        operators.put('(', 0);
        operators.put(')', 0);
    }

    public float calc() {
        return 0.0f;
    }

    private String convertToRPN(String expression) {
        StringBuilder rpn = new StringBuilder();
        Stack<Character> tempOperators = new Stack<Character>();

        for (int i = 0; i < expression.length(); i++) {
            Character token = expression.charAt(i);

            if (token >= '0' && token <= '9') {
                rpn.append(token);
            } else {
                switch (token) {
                // Operators with right associativity
                    case '^':

                        break;
                    case '!':

                        break;

                    case '(':
                        tempOperators.push(token);
                        break;

                    case ')':
                        while (tempOperators.peek() != '(') {
                            rpn.append(tempOperators.pop());
                        }

                        // Remove the closing parenthesis
                        tempOperators.pop();
                        break;

                    // Operators with left associativity ( +, -, *, / )
                    default:
                        while (!tempOperators.isEmpty() && !isBiggerPriority(token, tempOperators.peek())) {
                            rpn.append(tempOperators.pop());
                        }

                        tempOperators.push(token);
                        break;
                }
            }
        }

        while (!tempOperators.isEmpty()) {
            rpn.append(tempOperators.pop());
        }

        return rpn.toString();
    }

    private boolean isBiggerPriorityLeftAssoc(char first, char second) {
        if (this.operators.get(first) <= this.operators.get(second)) {
            return false;
        }

        return true;
    }

    private boolean isBiggerPriorityRightAssoc(char first, char second) {
        if (this.operators.get(first) < this.operators.get(second)) {
            return false;
        }

        return true;
    }

    public String getExpression() {
        return this.expression;
    }

    public void setExpression(String expression) {
        this.expression = this.convertToRPN(expression);
    }
}