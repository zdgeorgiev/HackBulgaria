import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class BuildScripts {

    static class Node {
        public final String name;
        public final HashSet<Edge> inEdges;
        public final HashSet<Edge> outEdges;

        public Node(String name) {
            this.name = name;
            inEdges = new HashSet<Edge>();
            outEdges = new HashSet<Edge>();
        }

        public Node addEdge(Node node) {
            Edge e = new Edge(this, node);
            outEdges.add(e);
            node.inEdges.add(e);
            return this;
        }

        @Override
        public String toString() {
            return name;
        }
    }

    static class Edge {
        public final Node from;
        public final Node to;

        public Edge(Node from, Node to) {
            this.from = from;
            this.to = to;
        }

        @Override
        public boolean equals(Object obj) {
            Edge e = (Edge) obj;
            return e.from == from && e.to == to;
        }
    }

    public static List<String> projects = new ArrayList<String>();
    public static List<BuildScripts.Node> allNodes = new ArrayList<BuildScripts.Node>();

    public static StringBuilder output = new StringBuilder();

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);
        int size = s.nextInt();

        for (int i = 0; i < size; i++) {
            String name = s.next();
            projects.add(name);
            allNodes.add(new BuildScripts.Node(name));
        }

        String startingProject = s.next();
        int startingIndex = projects.indexOf(startingProject);

        List<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();

        createAdjacencyList(s, size, graph);

        // L <- Empty list that will contain the sorted elements
        Stack<BuildScripts.Node> L = new Stack<BuildScripts.Node>();

        // S <- Set of all nodes with no incoming edges
        HashSet<BuildScripts.Node> S = new HashSet<BuildScripts.Node>();
        for (BuildScripts.Node n : allNodes) {
            if (n.inEdges.size() == 0) {
                S.add(n);
            }
        }

        boolean isFirstAdded = true;

        // while S is non-empty do
        while (!S.isEmpty()) {
            // remove a node n from S
            BuildScripts.Node n = null;

            if (isFirstAdded) {
                n = allNodes.get(startingIndex);
                isFirstAdded = false;
            } else {
                n = S.iterator().next();
            }

            S.remove(n);

            // insert n into L
            L.push(n);

            // for each node m with an edge e from n to m do
            for (Iterator<BuildScripts.Edge> it = n.outEdges.iterator(); it.hasNext();) {
                // remove edge e from the graph
                BuildScripts.Edge e = it.next();
                BuildScripts.Node m = e.to;
                it.remove();// Remove edge from n
                m.inEdges.remove(e);// Remove edge from m

                // if m has no other incoming edges then insert m into S
                if (m.inEdges.isEmpty()) {
                    S.add(m);
                }
            }
        }
        // Check to see if all edges are removed
        boolean cycle = false;
        for (BuildScripts.Node n : allNodes) {
            if (!n.inEdges.isEmpty()) {
                cycle = true;
                break;
            }
        }
        if (cycle) {
            System.out.println("false");
        } else {
            while (!L.isEmpty()) {
                System.out.print(L.pop() + " ");
            }
        }
    }

    private static void createAdjacencyList(Scanner s, int n, List<ArrayList<Integer>> graph) {
        int neighboursCount;

        for (int i = 0; i < n; i++) {
            neighboursCount = s.nextInt();

            for (int j = 0; j < neighboursCount; j++) {
                allNodes.get(i).addEdge(allNodes.get(projects.indexOf(s.next())));
            }
        }
    }
}
