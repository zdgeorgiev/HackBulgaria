package kMin;

import java.util.ArrayList;
import java.util.List;

public class KMin {

    // Finds the k-th minimum element in an unsorted collection.
    public int kthMinimum(List<Integer> numbers, int k) {

        heapify(numbers, numbers.size());

        int size = numbers.size() - 1;

        for (int i = 0; i < numbers.size(); i++) {

            swap(0, size, numbers);

            siftDown(0, size, numbers);

            size--;
        }
    }

    private static void heapify(ArrayList<Integer> arr, int size) {

        for (int i = size / 2 - 1; i >= 0; i--) {
            siftDown(i, size, arr);
        }
    }

    private static void swap(int i, int j, ArrayList<Integer> arr) {
        int temp = arr.get(i);
        arr.set(i, arr.get(j));
        arr.set(j, temp);
    }

    private static void siftDown(int parentIndex, int size, ArrayList<Integer> arr) {

        for (int i = parentIndex; i <= size / 2 - 1; i++) {
            int currentParent = arr.get(i);

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

            int maxChildIndex = i;

            if (leftChildIndex != -1 && rightChildIndex != -1) {
                maxChildIndex = arr.get(leftChildIndex) < arr.get(rightChildIndex) ? rightChildIndex : leftChildIndex;
            } else if (leftChildIndex != -1) {
                maxChildIndex = leftChildIndex;
            } else if (rightChildIndex != -1) {
                maxChildIndex = rightChildIndex;
            }

            if (arr.get(maxChildIndex) > currentParent) {
                swap(i, maxChildIndex, arr);
                siftDown(maxChildIndex, size, arr);
            } else {
                break;
            }
        }
    }
}