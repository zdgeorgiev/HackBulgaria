import java.util.ArrayList;
import java.util.Comparator;
import java.util.Scanner;

public class Median {

    private Heap<Integer> minHeap;
    private Heap<Integer> maxHeap;
    private Integer median;

    public Median() {
        this.minHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });

        this.maxHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1.compareTo(o2);
            }
        });
    }

    // inserts the number and returns the median
    public void insert(Integer number) {

        if (this.median == null) {
            minHeap.push(number);
            this.median = number;
        } else {
            if (number >= this.median) {

                if (this.minHeap.getSize() - 1 == this.maxHeap.getSize()) {
                    this.maxHeap.push(this.minHeap.pop());
                    this.minHeap.push(number);
                    this.median = this.minHeap.peek();
                } else {
                    this.minHeap.push(number);
                }
            } else {

                if (this.minHeap.getSize() == this.maxHeap.getSize()) {
                    this.minHeap.push(this.maxHeap.pop());
                    this.maxHeap.push(number);
                    this.median = this.minHeap.peek();
                } else {
                    this.maxHeap.push(number);
                }
            }
        }

        System.out.println(this.median);
    }

    public static void main(String[] args) {
        Median m = new Median();

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        for (int i = 0; i < n; i++) {
            m.insert(s.nextInt());
        }
    }

    public class Heap<T> {

        private ArrayList<T> arr;
        private Comparator<T> comparator;

        public Heap(Comparator<T> comparator) {
            this.comparator = comparator;
            this.arr = new ArrayList<T>();
        }

        public void push(T value) {
            this.arr.add(value);
            this.siftUp(this.arr.size() - 1);
        }

        public T pop() {
            T head = this.peek();

            swap(0, this.arr.size() - 1);
            this.arr.remove(this.arr.size() - 1);
            this.siftDown(0, this.arr.size());

            return head;
        }

        public T peek() {
            return this.arr.get(0);
        }

        private void swap(int i, int j) {
            T temp = this.arr.get(i);
            this.arr.set(i, this.arr.get(j));
            this.arr.set(j, temp);
        }

        private void siftUp(int index) {

            while (index >= 0) {
                T currentParent = this.arr.get((index - 1) / 2);

                if (this.comparator.compare(this.arr.get(index), currentParent) > 0) {
                    swap(index, (index - 1) / 2);
                    siftUp((index - 1) / 2);
                } else {
                    break;
                }
            }
        }

        private void siftDown(int parentIndex, int size) {

            for (int i = parentIndex; i <= size / 2 - 1; i++) {
                T currentParent = this.arr.get(i);

                int leftChildIndex = 2 * i + 1;
                leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

                int rightChildIndex = 2 * i + 2;
                rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

                int maxChildIndex = i;

                if (leftChildIndex != -1 && rightChildIndex != -1) {
                    maxChildIndex = this.comparator
                            .compare(this.arr.get(leftChildIndex), this.arr.get(rightChildIndex)) > 0 ? leftChildIndex
                            : rightChildIndex;
                } else if (leftChildIndex != -1) {
                    maxChildIndex = leftChildIndex;
                } else if (rightChildIndex != -1) {
                    maxChildIndex = rightChildIndex;
                }

                if (this.comparator.compare(this.arr.get(maxChildIndex), currentParent) > 0) {
                    swap(i, maxChildIndex);
                    siftDown(maxChildIndex, size);
                } else {
                    break;
                }
            }
        }

        public int getSize() {
            return this.arr.size();
        }
    }
}