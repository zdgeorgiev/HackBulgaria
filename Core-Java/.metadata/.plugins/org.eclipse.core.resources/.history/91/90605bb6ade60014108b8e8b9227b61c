package textCompression;

import java.io.IOException;
import java.nio.file.Path;
import java.util.LinkedHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import readAndWriteUtils.FileUtils;

public class Utils {

    public static void compressFile(Path source, Path destination) throws IOException {
        Pattern p = Pattern.compile("\\w+");
        String sourceContent = FileUtils.getInstance().readFrom(source.toFile());

        // contains all the words stored in index:word pair for easier search
        LinkedHashMap<Integer, String> map = new LinkedHashMap<Integer, String>();
        int currentIndex = 0;

        Matcher words = p.matcher(sourceContent);
        String[] betweenWords = sourceContent.split("\\w+");

        while (words.find()) {
            String currentWord = sourceContent.substring(words.start(), words.end());
            System.out.println(currentWord);

            if (!map.containsValue(currentWord)) {
                map.put(currentIndex++, currentWord);
            }
        }
    }

    public static void decompressFile(Path source, Path destination) {

    }
}
