package sorting;

public class HeapSort {

    public static void sort(int[] sequence) {

        heapify(sequence, sequence.length);

        int size = sequence.length - 1;

        for (int i = 0; i < sequence.length - 1; i++) {

            swap(0, size, sequence);

            siftDown(0, size, sequence);

            size--;
        }
    }

    private static void heapify(int[] arr, int size) {

        for (int i = size / 2 - 1; i >= 0; i--) {
            siftDown(i, size, arr);
        }
    }

    private static void swap(int i, int j, int[] arr) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static void siftDown(int parentIndex, int size, int[] arr) {

        for (int i = parentIndex; i <= size / 2 - 1; i++) {
            int currentParent = arr[i];

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

            int maxChildIndex = i;

            if (leftChildIndex != -1 && rightChildIndex != -1) {
                maxChildIndex = arr[leftChildIndex] < arr[rightChildIndex] ? rightChildIndex : leftChildIndex;
            } else if (leftChildIndex != -1) {
                maxChildIndex = leftChildIndex;
            } else if (rightChildIndex != -1) {
                maxChildIndex = rightChildIndex;
            }

            if (arr[maxChildIndex] > currentParent) {
                swap(i, maxChildIndex, arr);
                siftDown(maxChildIndex, size, arr);
            } else {
                break;
            }
        }
    }
}