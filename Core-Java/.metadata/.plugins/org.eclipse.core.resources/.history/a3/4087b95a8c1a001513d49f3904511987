public class BST {

    public static class Node {

        public int value;
        public Node left;
        public Node right;
    }

    // Checks if a binary tree is a binary search tree.
    public boolean isBST(Node root) {
        return BSTUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private boolean BSTUtil(Node root, int minValue, int maxValue) {

        if (root == null) {
            return true;
        }

        if (root.left.value <= root.value && root.right.value > root.value
                && checkLeftSubTree(root.left, minValue, root.value) && checkRightSubTree(root, root.value, maxValue)) {
            return true;
        } else {
            return false;
        }
    }

    private boolean checkLeftSubTree(Node node, int minValue, int maxValue) {
        if(node.value < minValue || node.value > maxValue) {
            return false;
        }
        
        return checkLeftSubTree(node.left, minValue, node.value)
    }

    private boolean checkRightSubTree(Node node, int minValue, int maxValue) {
        return false;

    }
}