package pointCalcs;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

public class PointUtils {
    public static Map<Point, Point> getNearestPoints(List<Point> points) {
        ConcurrentHashMap<Point, Point> map = new ConcurrentHashMap<>();

        for (Point i : points) {
            double minDistance = Double.MAX_VALUE;
            Point nearestPoint = null;

            for (Point j : points) {
                double distance = i.getDistance(j);

                if (distance < minDistance) {
                    minDistance = distance;
                    nearestPoint = j;
                }
            }

            map.put(i, nearestPoint);
        }

        return map;
    }

    public static void doCalculations(List<Point> inPoints, int indexFrom, int indexTo,
            ConcurrentHashMap<Point, Point> outMap) {

        for (int i = 0; i < inPoints.size(); i++) {
            Point currentPoint = inPoints.get(i);
            Point nearestPoint = null;
            
            double minDistance = Double.MAX_VALUE;

            for (int j = 0; j < inPoints.size(); j++) {

                double distance = i.getDistance(j);

                if (distance < minDistance) {
                    minDistance = distance;
                    nearestPoint = j;
                }
            }

            outMap.put(currentPoint, nearestPoint);
        }
    }

    public static List<Point> generatePoints() {
        List<Point> list = new ArrayList<Point>();

        Random random = new Random();

        for (int i = 0; i < 100_000; i++) {
            list.add(new Point(random.nextInt(10_001), random.nextInt(10_001)));
        }

        return list;
    }
}
