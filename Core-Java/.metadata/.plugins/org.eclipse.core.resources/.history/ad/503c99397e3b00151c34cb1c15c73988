import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class KPaths {

    private static final int MAX_VERTICES = 1000;

    private static int[][] dp;
    private static List<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();

    public static void main(String[] args) {

        for (int i = 0; i < MAX_VERTICES; i++) {
            graph.add(new ArrayList<Integer>());
        }

        dp = new int[MAX_VERTICES + 1][MAX_VERTICES + 1];

        Scanner s = new Scanner(System.in);
        int edges = s.nextInt();

        for (int i = 0; i < edges; i++) {
            int from = s.nextInt();
            int to = s.nextInt();

            graph.get(from).add(to);
        }

        int startingVertex = s.nextInt();
        int endVertex = s.nextInt();
        int maxStep = s.nextInt();

        // Fill the initial cases
        for (int i = 0; i < MAX_VERTICES; i++) {
            dp[i][0] = 1;
            dp[0][i] = 1;
        }

        ArrayList<Integer> currentVertices = new ArrayList<Integer>();
        currentVertices.add(startingVertex);

        for (int i = 1; i < maxStep; i++) {
            ArrayList<Integer> nextVertices = new ArrayList<Integer>();

            // Add all of the incoming of the current vertex
            for (int j = 0; j < currentVertices.size(); j++) {

                int nextVertex = graph.get(startingVertex).get(j);
                nextVertices.add(nextVertex);

                dp[i][nextVertex] += dp[i - 1][startingVertex];
            }

            currentVertices = nextVertices;
        }

        System.out.println(dp[startingVertex][maxStep]);
    }
}
