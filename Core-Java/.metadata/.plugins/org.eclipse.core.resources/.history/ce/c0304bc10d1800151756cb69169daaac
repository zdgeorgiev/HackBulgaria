package heapSort;

import java.util.Arrays;

public class HeapSort {

    // Sorts a sequence of integers.
    public void sort(int[] sequence) {
        heapify(sequence);
        System.out.println(Arrays.toString(sequence));
    }

    public static void main(String[] args) {
        HeapSort h = new HeapSort();
        h.sort(new int[] { 4, 13, 52, 7, 18, 3, 1, 6 });
    }

    private static void heapify(int[] arr) {

        int size = arr.length - 1;

        for (int i = size / 2; i >= 0; i--) {

            int currentParent = arr[i];

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex > size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex > size ? -1 : rightChildIndex;

            int minChildIndex = i;

            if (leftChildIndex != -1 && rightChildIndex != -1) {
                minChildIndex = arr[leftChildIndex] > arr[rightChildIndex] ? rightChildIndex : leftChildIndex;
            } else if (leftChildIndex != -1) {
                minChildIndex = leftChildIndex;
            } else if (rightChildIndex != -1) {
                minChildIndex = rightChildIndex;
            }

            if (arr[minChildIndex] < currentParent) {
                swap(i, minChildIndex, arr);
                shiftDown(minChildIndex, arr);
            }
        }
    }

    private static void swap(int i, int j, int[] arr) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static void shiftDown(int index, int[] arr) {

        int size = arr.length - 1;

        for (int i = index; i < size / 2; i++) {
            int currentParent = arr[i];

            int leftChildIndex = 2 * i + 1;
            leftChildIndex = leftChildIndex > size ? -1 : leftChildIndex;

            int rightChildIndex = 2 * i + 2;
            rightChildIndex = rightChildIndex > size ? -1 : rightChildIndex;

            int minChildIndex = i;

            if (leftChildIndex != -1 && rightChildIndex != -1) {
                minChildIndex = arr[leftChildIndex] > arr[rightChildIndex] ? rightChildIndex : leftChildIndex;
            } else if (leftChildIndex != -1) {
                minChildIndex = leftChildIndex;
            } else if (rightChildIndex != -1) {
                minChildIndex = rightChildIndex;
            }

            if (arr[minChildIndex] < currentParent) {
                swap(i, minChildIndex, arr);
                shiftDown(minChildIndex, arr);
            }
        }
    }
}