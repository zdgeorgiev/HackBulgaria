import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class ClosestCoffeeStore {

    private boolean isFound = false;
    private List<Integer> visited = new ArrayList<Integer>();

    // Finds the closest coffee store to a point.
    public int closestCoffeeStore(boolean[][] graph, boolean[] isCoffeStore, int startingPoint) {

        int stepsCount = -1;

        Queue queue = new LinkedList();
        queue.add(startingPoint);
        visited.add(startingPoint);

        while (!queue.isEmpty()) {
            for (int i = 0; i < graph[startingPoint].length; i++) {
                if (graph[startingPoint][i] && this.visited.get(startingPoint) == 0) {
                    stepsCount++;
                    queue.add(i);

                    if (isCoffeStore[i]) {
                        return stepsCount;
                    }
                }
            }
        }

        return stepsCount;
    }

    public static void main(String[] args) {
        ClosestCoffeeStore c = new ClosestCoffeeStore();
        boolean[][] graph = new boolean[][] { { false, true, false, true, false, false },
                { true, false, true, false, false, false }, { false, true, false, false, true, false },
                { true, false, false, false, false, false }, { false, false, true, false, false, true },
                { false, false, false, false, true, false } };

        boolean[] isCoffeStore = new boolean[] { false, false, true, false, false, true };

        int steps = new ClosestCoffeeStore().closestCoffeeStore(graph, isCoffeStore, 0);
    }
}
