package com.hackbulgaria.fileruler;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;

import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

public class CellRenderer extends JLabel implements ListCellRenderer<Object> {

    protected DefaultListCellRenderer defaultRenderer = new DefaultListCellRenderer();

    final static ImageIcon movieIcon = new ImageIcon(".\\res\\movie.gif");
    final static ImageIcon picsIcon = new ImageIcon(".\\res\\pics.gif");

    // This is the only method defined by ListCellRenderer.
    // We just reconfigure the JLabel each time we're called.

    @Override
    public Component getListCellRendererComponent(JList<?> list, // the list
            Object value, // value to display
            int index, // cell index
            boolean isSelected, // is the cell selected
            boolean cellHasFocus) // does the cell have focus
    {
        ;

        Font font = new Font("Helvetica", Font.PLAIN, 20, Color.RED, new MyIcon());
        Color theForeground = null;
        Icon theIcon = null;

        System.out.println("Cell Renderer - value = " + value);
        String s = value.toString();
        setText(s);
        System.out.println("Cell Renderer - s = " + s);
 
        if (isSelected) {
            setBackground(list.getSelectionBackground());
            setForeground(list.getSelectionForeground());
        } else {
            setBackground(list.getBackground());
            setForeground(list.getForeground());
        }

        JLabel renderer = (JLabel) defaultRenderer.getListCellRendererComponent(list, value, index, isSelected,
                cellHasFocus);

        
        
        if (theIcon != null) {
            if () {
                renderer.setIcon(movieIcon);
            } isle if () {
                renderer.setIcon(picsIcon);
            }
        }
        renderer.setEnabled(true);

        renderer.setFont(font);
        setOpaque(true);
        return renderer;
    }
}
