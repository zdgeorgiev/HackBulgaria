import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

import Graph.Node;

public class ValidDirectories {

    private static int[] visited;

    public boolean isValid(int[][] graph) {

        Queue<Integer> queue = new LinkedList<Integer>();

        queue.add(0);
        visited[0] = 1;

        while (!queue.isEmpty()) {

            int currentIndex = queue.poll();

            for (int i = 0; i < graph[currentIndex].length; i++) {

                if (graph[currentIndex][i] == 1) {
                    if (visited[i] == 0) {
                        queue.add(i);
                    } else {
                        return false;
                    }
                }
            }

            visited[currentIndex] = 1;
        }

        // L ← Empty list that will contain the sorted elements
        ArrayList<Integer> sorted = new ArrayList<Integer>();

        // S ← Set of all nodes with no incoming edges
        ArrayList<Integer> noIncomingEdges = new ArrayList<Integer>();

        // while S is non-empty do
        while (!noIncomingEdges.isEmpty()) {
            // remove a node n from S
            Integer node = noIncomingEdges.get(noIncomingEdges.size() - 1);
            noIncomingEdges.remove(noIncomingEdges.size() - 1);

            // add n to tail of L
            sorted.add(node);

            // for each node m with an edge e from n to m do
            for (int i = 0; i < graph[node].length; i++) {
                // remove edge e from the graph
                // if m has no other incoming edges then
                // insert m into S
                if (graph[node][i] == 1) {
                    graph[node][i] = 0;
                }
            }
        }
        // if graph has edges then
        // return error (graph has at least one cycle)
        // else
        // return L (a topologically sorted order)

        return true;
    }



    public static void main(String[] args) {
        Node seven = new Node("7");
        Node five = new Node("5");
        Node three = new Node("3");
        Node eleven = new Node("11");
        Node eight = new Node("8");
        Node two = new Node("2");
        Node nine = new Node("9");
        Node ten = new Node("10");
        seven.addEdge(eleven).addEdge(eight);
        five.addEdge(eleven);
        three.addEdge(eight).addEdge(ten);
        eleven.addEdge(two).addEdge(nine).addEdge(ten);
        eight.addEdge(nine).addEdge(ten);

        Node[] allNodes = { seven, five, three, eleven, eight, two, nine, ten };
        // L <- Empty list that will contain the sorted elements
        ArrayList<Node> L = new ArrayList<Node>();

        // S <- Set of all nodes with no incoming edges
        HashSet<Node> S = new HashSet<Node>();
        for (Node n : allNodes) {
            if (n.inEdges.size() == 0) {
                S.add(n);
            }
        }
    }
}
