import java.math.BigInteger;
import java.util.Scanner;

public class NeedleHaystack {

    private static StringBuilder result = new StringBuilder();

    private static final String BASE = "101";

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        String haystack = s.next();
        String needle = s.next();

        rabinKarp(haystack, needle);

        System.out.println(result.toString());
    }

    private static void rabinKarp(String haystack, String needle) {
        BigInteger hashHaystack = getHash(haystack);
        BigInteger hashNeedle = getHash(needle);

    }

    private static BigInteger getHash(String needle) {

        BigInteger hash = new BigInteger("0");
        int size = needle.length();

        for (int i = 0; i < needle.length(); i++) {

            BigInteger currentBasePower = new BigInteger(BASE).pow(size);
            BigInteger currentStep =BigInteger.valueOf(Long.valueOf(needle.charAt(i) - '0')); 
            hash = BigInteger.valueOf(Long.valueOf(needle.charAt(i) - '0'))

            size--;
        }

        return hash;
    }

    private static String getLongFromChar(char c) {
        return String.valueOf(c - '0');
    }
}