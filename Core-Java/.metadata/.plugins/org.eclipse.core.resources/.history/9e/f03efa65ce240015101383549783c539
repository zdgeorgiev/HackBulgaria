import java.util.Comparator;
import java.util.Scanner;

public class Median {

    private Heap<Integer> minHeap;
    private Heap<Integer> maxHeap;
    private Integer median;
    private int ballance;

    private StringBuilder result = new StringBuilder();

    public Median() {
        this.minHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o2.compareTo(o1);
            }
        });

        this.maxHeap = new Heap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer o1, Integer o2) {
                return o1.compareTo(o2);
            }
        });
    }

    // inserts the number and returns the median
    public void insert(Integer number) {

        switch (balance) {
            case 0: // the two heaps have the same number of elements
            if (newval < CurrentMedian) { // "<=" is just as good as "<"
            SmallElements.Insert(newval);
            CurrentMedian = SmallElements.Max();
            balance = -1;
            } else {
            BigElements.Insert(newval);
            CurrentMedian = BigElements.Min();
            balance = +1;
            }
            return;
            case +1: // BigElements has an extra element
            if (newval <= CurrentMedian) { // "<=" is better than "<"
            // this Insert brings us back into balance
            SmallElements.Insert(newval);
            } else {
            BigElements.Insert(newval);
            // BigElements now has two extra elements; must rebalance
            SmallElements.Insert(BigElements.DeleteMin());
            }
            balance = 0; // we’re always balanced at this point
            return; // note that CurrentMedian doesn’t change
            case -1: // SmallElements has an extra element
            // [the code is parallel to the +1 case]
            }
            }

        result.append(this.median + "\n");
    }

    public static void main(String[] args) {
        Median m = new Median();

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        for (int i = 0; i < n; i++) {
            m.insert(s.nextInt());
        }

        System.out.println(m.result.substring(0, m.result.length() - 1));
    }
}