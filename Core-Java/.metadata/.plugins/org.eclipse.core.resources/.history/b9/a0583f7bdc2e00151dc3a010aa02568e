import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

public class LowCostFlights {

    private static int[][] graph;
    private static int[][] minPaths;
    private static Pair[][] prev;

    private static StringBuilder output = new StringBuilder();

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();
        graph = new int[n][n];
        minPaths = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                graph[i][j] = s.nextInt();
            }
        }

        int commands = s.nextInt();

        List<ArrayList<Integer>> startAirpoints = new ArrayList<ArrayList<Integer>>();

        for (int i = 0; i < commands; i++) {
            int startAirport = s.nextInt();
            int endAirport = s.nextInt();

            ArrayList<Integer> currentFlight = new ArrayList<Integer>();
            currentFlight.add(startAirport);
            currentFlight.add(endAirport);

            startAirpoints.add(currentFlight);
        }

        for (int i = 0; i < startAirpoints.size(); i++) {
            createMinPaths(startAirpoints.get(i).get(0));
        }

        for (int i = 0; i < startAirpoints.size(); i++) {
            output.append(getMinPath(startAirpoints.get(i).get(0), startAirpoints.get(i).get(1)));
        }

        System.out.print(output.toString());
    }

    private static void createMinPaths(int startPoint) {

        PriorityQueue<Pair> neighbours = new PriorityQueue<Pair>(10, new Comparator<Pair>() {

            @Override
            public int compare(Pair arg0, Pair arg1) {
                return Integer.compare(arg0.weight, arg1.weight);
            }
        });

        minPaths[startPoint][startPoint] = 0;

        prev = new Pair[graph.length][graph.length];
        minPaths = new int[graph.length][graph.length];

        for (int i = 0; i < graph.length; i++) {

            if (i != startPoint) {
                minPaths[startPoint][i] = Integer.MAX_VALUE;
                prev[startPoint][i] = null;
            }

            neighbours.add(new Pair(i, minPaths[startPoint][i]));
        }

        while (!neighbours.isEmpty()) {
            Pair currentNode = neighbours.poll();

            for (int i = 0; i < graph[currentNode.vertex].length; i++) {
                if (graph[currentNode.vertex][i] == 1) {
                    int currentPath = minPaths[startPoint][currentNode.vertex] + currentNode.weight;

                    if (currentPath < minPaths[startPoint][i]) {
                        minPaths[startPoint][i] = currentPath;
                        prev[startPoint][i] = currentNode;

                        Pair currentNodeCpy = new Pair(i, currentPath);
                        neighbours.add(currentNodeCpy);
                    }
                }
            }
        }
    }

    private static String getMinPath(int from, int to) {
        if (from == to) {
            return "0\n";
        }

        int path = minPaths[from][to];
        return path != Integer.MAX_VALUE ? String.valueOf(path) + "\n" : "NO WAY\n";
    }
}
