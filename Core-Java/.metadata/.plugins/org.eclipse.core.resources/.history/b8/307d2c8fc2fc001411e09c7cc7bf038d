package multiplyingMatrices;

public class Program {
    public static void main(String[] args) {
        int[][] first = new int[][] { { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 },
                { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 },
                { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 },
                { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 },
                { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 },
                { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 },
                { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 },
                { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 },
                { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 },
                { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 },
                { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 },
                { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 },
                { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 },
                { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 },
                { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 },
                { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 },
                { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 }, { 2, 1 }, { 3, 4 }, { 5, 6 },
                { 2, 1 }, { 3, 4 }, { 5, 6 } };

        int[][] second = new int[][] { { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 },
                { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 }, { 1, 3, 6 }, { 2, 4, 5 } };

        ParallelMatricesMultiplier multiplier = new ParallelMatricesMultiplier(first, second);

        long start = System.currentTimeMillis();
        multiplier.multiply();
        System.out.println(System.currentTimeMillis() - start);

        long start2 = System.currentTimeMillis();
        multiplier.multiplySlow();
        System.out.println(System.currentTimeMillis() - start2);
    }

    private static void print(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {

            for (int j = 0; j < matrix[0].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }

            System.out.println();
        }
    }
}
