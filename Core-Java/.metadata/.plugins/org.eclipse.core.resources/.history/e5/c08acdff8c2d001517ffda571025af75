import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.Scanner;

public class VitoshaRun {

    private static int[][] matrix;
    private static int[][] minPathMatrix;

    private static int[][] directions = new int[][] { { 1, 0 }, { 0, 1 }, { 1, 1 }, { -1, 0 }, { 0, -1 }, { -1, 1 },
            { 1, -1 }, { -1, -1 } };

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();
        matrix = new int[n][n];
        minPathMatrix = new int[n][n];

        Point startingPoint = new Point(s.nextInt(), s.nextInt(), -1, -1);
        Point endPoint = new Point(s.nextInt(), s.nextInt(), -1, -1);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = s.nextInt();
            }
        }

        fillMinPaths(startingPoint, endPoint);

        System.out.println(minPathMatrix[endPoint.x][endPoint.y]);
    }

    private static void fillMinPaths(Point startingPoint, Point endPoint) {

        PriorityQueue<Point> queue = new PriorityQueue<Point>(new Comparator<Point>() {
            @Override
            public int compare(Point arg0, Point arg1) {
                return Integer.compare(arg0.value, arg1.value);
            }
        });

        queue.add(startingPoint);

        while (!queue.isEmpty()) {

            Point currentPoint = queue.poll();

        }
    }

    private static boolean isValidCell(int x, int y) {
        return minPathMatrix[x][y] == 0 && ((x < matrix.length && x >= 0) && (y < matrix[0].length && y >= 0));
    }
}
