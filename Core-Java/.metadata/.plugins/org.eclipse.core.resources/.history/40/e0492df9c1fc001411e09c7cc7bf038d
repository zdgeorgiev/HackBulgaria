package multiplyingMatrices;

public class ParallelMatricesMultiplier {
    private int[][] firstMatrix = null;
    private int[][] secondMatrix = null;

    private int[][] result = null;

    public ParallelMatricesMultiplier(int[][] first, int[][] second) {
        this.firstMatrix = first;
        this.secondMatrix = second;
        this.result = new int[firstMatrix.length][secondMatrix[0].length];
    }

    public int[][] multiply() {
        Thread[] threads = new Thread[this.firstMatrix.length];

        for (int i = 0; i < threads.length; i++) {
            threads[i] = new Thread(new MultiplierRowWorker(i, firstMatrix, secondMatrix, result));
            threads[i].start();

            try {
                threads[i].join();
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        return result;
    }

    public int[][] multiplySlow() {

        for (int k = 0; k < this.firstMatrix.length; k++) {
            int[] firstMatrixRow = firstMatrix[k];
            for (int j = 0; j < this.secondMatrix[0].length; j++) {
                int value = 0;

                for (int i = 0; i < firstMatrixRow.length; i++) {

                    value += firstMatrixRow[i] * this.secondMatrix[i][j];
                }

                this.result[rowIndex][j] = value;
                // System.out.println("M[" + rowIndex + "," + j + "] = " +
                // value);
            }
        }

        return result;
    }
}
