import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class KIntersect {

    private static HashMap<Integer, Integer> intersect = new HashMap<Integer, Integer>();

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        int k = s.nextInt();

        int listNumbers = s.nextInt();

        // Initialize the hashMap with the firstList
        for (int i = 0; i < listNumbers; i++) {
            int currentNumber = s.nextInt();

            if (intersect.containsKey(currentNumber)) {
                intersect.put(currentNumber, intersect.get(currentNumber) + 1);
            } else {
                intersect.put(currentNumber, 1);
            }
        }

        // Process all other lists
        for (int i = 0; i < k - 1; i++) {
            HashMap<Integer, Integer> currentListNumbers = new HashMap<Integer, Integer>();
            listNumbers = s.nextInt();

            for (int j = 0; j < listNumbers; j++) {
                int currentNumber = s.nextInt();

                if (currentListNumbers.containsKey(currentNumber)) {
                    currentListNumbers.put(currentNumber, currentListNumbers.get(currentNumber) + 1);
                } else {
                    currentListNumbers.put(currentNumber, 1);
                }
            }

            Iterator iterator = currentListNumbers.entrySet().iterator();

            for (Map.Entry<Integer, Integer> pair : currentListNumbers.entrySet()) {

                if (intersect.containsKey(pair.getKey())) {
                    Integer intersectNumberCount = intersect.get(pair.getKey());
                    Integer currentListNumberCount = pair.getValue();

                    if (intersectNumberCount <= currentListNumberCount) {
                        continue;
                    } else if (intersectNumberCount > currentListNumberCount) {
                        intersect.put(pair.getKey(), currentListNumberCount);
                    }
                } else {
                    // Remove the pairs which arent in the global intersect
                    currentListNumbers.remove(pair.getKey());
                    currentListNumbers.entrySet().iterator();
                }
            }

            intersect = currentListNumbers;
        }

        System.out.println(intersect);
    }
}
