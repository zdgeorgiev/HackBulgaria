import java.util.ArrayList;
import java.util.Scanner;

public class Quadruplets {

    public static class Pair {

        public Integer key;
        public Integer value;

        public Pair(Integer key, Integer value) {
            this.key = key;
            this.value = value;
        }
    }

    private static HashMap map = new Quadruplets.HashMap();

    public static class HashMap {

        private ArrayList<ArrayList<Pair>> data;
        private int modul = 31;
        private int totalElement = 0;

        private final double Load_Factor = 0.75;
        private double threshold = 0;

        public HashMap() {
            this.data = new ArrayList<ArrayList<Pair>>();
            this.updateThreshold();

            for (int i = 0; i < this.modul; i++) {
                this.data.add(new ArrayList<Pair>());
            }
        }

        public void add(Integer number) {
            int numberHash = getHashCodeInt(number);

            if (this.contains(number)) {
                for (int i = 0; i < this.data.get(numberHash).size(); i++) {
                    Pair currentElement = this.data.get(numberHash).get(i);

                    if (currentElement.key == number) {
                        currentElement.value++;
                        break;
                    }
                }
            } else {

                this.data.get(numberHash).add(new Pair(number, 1));
                this.totalElement++;

                if (this.totalElement >= this.threshold) {
                    resizeTheData();
                }
            }
        }

        public void remove(Integer number) {
            int numberHash = getHashCodeInt(number);

            int currentListLenght = this.data.get(numberHash).size();
            for (int i = 0; i < currentListLenght; i++) {
                if (this.data.get(numberHash).get(i).key == number) {
                    this.data.get(numberHash).remove(i);
                    this.totalElement--;
                    break;
                }
            }
        }

        public boolean contains(Integer number) {

            int probablyIndexList = getHashCodeInt(number);
            for (int i = 0; i < this.data.get(probablyIndexList).size(); i++) {
                if (this.data.get(probablyIndexList).get(i).key == number) {
                    return true;
                }
            }

            return false;
        }

        public int getValue(Integer number) {
            int value = -1;

            int probablyIndexList = getHashCodeInt(number);
            for (int i = 0; i < this.data.get(probablyIndexList).size(); i++) {
                if (this.data.get(probablyIndexList).get(i).key == number) {
                    return this.data.get(probablyIndexList).get(i).value;
                }
            }

            return value;
        }

        private void resizeTheData() {
            ArrayList<ArrayList<Pair>> newList = new ArrayList<ArrayList<Pair>>();

            // Resize it double
            int newSize = this.data.size() * 2;
            this.modul *= 2;
            this.updateThreshold();

            for (int i = 0; i < newSize; i++) {
                newList.add(new ArrayList<Pair>());
            }

            for (int i = 0; i < this.data.size(); i++) {
                for (int j = 0; j < this.data.get(i).size(); j++) {
                    Pair currentElement = this.data.get(i).get(j);
                    newList.get(getHashCodeInt(currentElement.key)).add(
                            new Pair(currentElement.key, currentElement.value));
                }
            }
        }

        private void updateThreshold() {
            this.threshold = this.modul * this.Load_Factor;
        }

        private int getHashCodeInt(Integer number) {

            int hashCode = Math.abs(number % this.modul);
            return hashCode;
        }
    }

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);
        int n = s.nextInt();

        ArrayList<Integer> first = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            first.add(s.nextInt());
        }

        ArrayList<Integer> second = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            second.add(s.nextInt());
        }

        ArrayList<Integer> third = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            third.add(s.nextInt());
        }

        ArrayList<Integer> fourth = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            fourth.add(s.nextInt());
        }

        permutationSum(first, second);

        int count = 0;
        
        for (int i = 0; i < third.size(); i++) {
            for (int j = 0; j < fourth.size(); j++) {
                int currentNumber = (third.get(i) + fourth.get(j)) * -1;

                if (map.contains(currentNumber)) {
                    count += map.getValue(currentNumber);
                }
            }
        }

        System.out.println(count);
    }

    private static void permutationSum(ArrayList<Integer> a, ArrayList<Integer> b) {

        for (int i = 0; i < a.size(); i++) {
            for (int j = 0; j < b.size(); j++) {
                map.add(a.get(i) + b.get(j));
            }
        }
    }
}