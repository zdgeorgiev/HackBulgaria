import java.util.ArrayList;
import java.util.Scanner;

public class BST {

    public static class Node {

        public int value;
        public Node left;
        public Node right;
    }

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);
        int n = s.nextInt();

        ArrayList<BST.Node> nodes = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            BST.Node currentNode = new BST.Node();
            currentNode.value = s.nextInt();
            nodes.add(currentNode);
        }

        for (int i = 0; i < n; i++) {
            if (2 * i + 1 < n) {
                nodes.get(i).left = nodes.get(2 * i + 1);
            }
            if (2 * i + 2 < n) {
                nodes.get(i).right = nodes.get(2 * i + 2);
            }
        }

        System.out.println(new BST().isBST(nodes.get(0)) ? "YES" : "NO");
    }

    // Checks if a binary tree is a binary search tree.
    public boolean isBST(Node root) {
        return BSTUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private boolean BSTUtil(Node root, int minValue, int maxValue) {

        if (root == null || root.value == 0) {
            return true;
        }

        if (checkLeftSubTree(root.left, minValue, root.value) && checkRightSubTree(root.right, root.value, maxValue)) {
            return true;
        } else {
            return false;
        }
    }

    private boolean checkLeftSubTree(Node node, int minValue, int maxValue) {
        if (node == null || node.value == 0) {
            return true;
        }

        if (node.value < minValue || node.value > maxValue) {
            return false;
        }

        return checkLeftSubTree(node.left, minValue, node.value) && checkRightSubTree(node.right, node.value, maxValue);
    }

    private boolean checkRightSubTree(Node node, int minValue, int maxValue) {
        if (node == null || node.value == 0) {
            return true;
        }

        if (node.value <= minValue || node.value > maxValue) {
            return false;
        }

        return checkLeftSubTree(node.left, minValue, node.value) && checkRightSubTree(node.right, node.value, maxValue);
    }
}