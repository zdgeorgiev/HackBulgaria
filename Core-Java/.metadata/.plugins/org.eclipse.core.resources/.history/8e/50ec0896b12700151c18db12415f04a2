import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

public class KLists {

    public class Node {
        public int value;
        public Node next;
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        Set<List<Integer>> lists = new HashSet<List<Integer>>();

        for (int i = 0; i < n; i++) {

            int currentNumber = s.nextInt();
            LinkedList<Integer> currentList = new LinkedList<Integer>();

            while (currentNumber != -1) {
                currentList.add(currentNumber);
                currentNumber = s.nextInt();
            }

            lists.add(currentList);
        }

        merge(lists);
    }

    public static <T extends Comparable<? super T>> void merge(Set<List<T>> lists) {
        List<T> result = new ArrayList<T>();

        int totalSize = 0; // every element in the set
        for (List<T> l : lists) {
            totalSize += l.size();
        }

        boolean first; // awkward
        List<T> lowest = lists.iterator().next(); // the list with the lowest
                                                  // item to add

        while (result.size() < totalSize) { // while we still have something to
                                            // add
            first = true;

            for (List<T> l : lists) {
                if (!l.isEmpty()) {
                    if (first) {
                        lowest = l;
                        first = false;
                    } else if (l.get(0).compareTo(lowest.get(0)) <= 0) {
                        lowest = l;
                    }
                }
            }
            result.add(lowest.get(0));
            System.out.print(lowest.get(0) + "\n");
            lowest.remove(0);
        }
    }
}
