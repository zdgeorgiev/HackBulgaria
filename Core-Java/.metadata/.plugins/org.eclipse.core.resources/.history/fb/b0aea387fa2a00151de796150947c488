import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;

public class Navigation {

    private static List<ArrayList<Vertex>> graph = new ArrayList<ArrayList<Vertex>>();

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<Vertex>());
        }

        int m = s.nextInt();

        int startingIndex = s.nextInt();
        int endIndex = s.nextInt();

        for (int i = 0; i < m; i++) {
            int fromIndex = s.nextInt();
            int toIndex = s.nextInt();
            int weight = s.nextInt();

            graph.get(fromIndex - 1).add(new Vertex(toIndex - 1, weight, 0));
            graph.get(toIndex - 1).add(new Vertex(fromIndex - 1, weight, 0));
        }

        getMinDistance(startingIndex - 1, endIndex - 1);
    }

    private static void getMinDistance(int startingIndex, int endIndex) {

        ArrayList<Pair> shortestPaths = new ArrayList<Pair>();

        for (int i = 0; i < graph.size(); i++) {
            shortestPaths.add(new Pair(null, -1));
        }

        PriorityQueue<Vertex> neighbours = new PriorityQueue<Vertex>(10, new Comparator<Vertex>() {

            @Override
            public int compare(Vertex arg0, Vertex arg1) {
                return Integer.compare(arg0.weight, arg1.weight);
            }
        });

        neighbours.add(new Vertex(startingIndex, 0, 0));

        while (!neighbours.isEmpty()) {

            Vertex head = neighbours.poll();
            int headIndex = head.vertexIndex;

            // If the shortest path isnt found yet
            if (shortestPaths.get(headIndex).prevParentIndex == 0) {
                shortestPaths.get(headIndex).prevParentIndex = head.parentIndex;
            }

            Vertex nextVertex = neighbours.peek();

            // If theres more than 1 edges with same weight should add them all
            if (nextVertex != null) {
                while (nextVertex.weight == head.weight) {
                    visited[nextVertex.vertexIndex] = 1;

                    minPathVector[nextVertex.vertexIndex] = minPathVector[nextVertex.parentIndex] + nextVertex.weight;

                    if (shortestPaths.get(nextVertex.vertexIndex).size() == 0) {
                        shortestPaths.get(nextVertex.vertexIndex).add(nextVertex.parentIndex);
                    }

                    // Move to the next
                    nextVertex = neighbours.poll();

                    if (nextVertex != null) {
                        break;
                    }
                }
            }

            // Fill the current min value to the next vertex
            minPathVector[headIndex] = minPathVector[head.parentIndex] + head.weight;

            // Break if reached the end point
            if (minPathVector[endIndex] != 0) {
                System.out.println(minPathVector[endIndex]);
                // System.out.println(shortestPaths.get(endIndex));
                printMinPath(shortestPaths, endIndex);
                return;
            }

            for (int i = 0; i < graph.get(headIndex).size(); i++) {
                int weight = graph.get(headIndex).get(i).weight;
                int vertexIndex = graph.get(headIndex).get(i).vertexIndex;

                if (visited[vertexIndex] == 0 && weight != 0) {
                    neighbours.add(new Vertex(vertexIndex, weight, head.vertexIndex));
                }
            }
        }
    }

    private static void printMinPath(List<ArrayList<Integer>> list, int index) {
        int prevIndex = list.get(index).get(0);
        int lastIndex = 0;

        StringBuilder result = new StringBuilder();

        while (lastIndex != prevIndex) {

            result.insert(0, (prevIndex + 1) + " ");
            int temp = prevIndex;
            prevIndex = list.get(prevIndex).get(0);
            lastIndex = temp;
        }

        result.append(index + 1);

        System.out.println(result.toString());
    }
}
