package heapSort;

import java.util.Arrays;
import java.util.Random;

public class HeapSort {

    // Sorts a sequence of integers.
    public void sort(int[] sequence) {
        for (int i = 0; i < sequence.length; i++) {
            heapify(i, sequence);
        }

        System.out.println(Arrays.toString(sequence));
    }

    public static void main(String[] args) {
        HeapSort h = new HeapSort();
        int[] arr = new int[10];

        for (int i = 0; i < 10; i++) {
            arr[i] = new Random().nextInt(1001);
        }

        h.sort(arr);
    }

    private static void heapify(int start, int[] arr) {

        int size = arr.length - start;

        for (int i = size / 2 + start - 1; i >= start; i--) {
            siftDown(i, start, arr);
        }
    }

    private static void swap(int i, int j, int[] arr) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private static void siftDown(int startIndex, int end, int[] arr) {

        int size = arr.length;

        int currentParent = arr[startIndex];

        int leftChildIndex = 2 * startIndex - end + 1;
        leftChildIndex = leftChildIndex >= size ? -1 : leftChildIndex;

        int rightChildIndex = 2 * startIndex - end + 2;
        rightChildIndex = rightChildIndex >= size ? -1 : rightChildIndex;

        int minChildIndex = startIndex;

        if (leftChildIndex != -1 && rightChildIndex != -1) {
            minChildIndex = arr[leftChildIndex] > arr[rightChildIndex] ? rightChildIndex : leftChildIndex;
        } else if (leftChildIndex != -1) {
            minChildIndex = leftChildIndex;
        } else if (rightChildIndex != -1) {
            minChildIndex = rightChildIndex;
        }

        if (arr[minChildIndex] < currentParent) {
            swap(startIndex, minChildIndex, arr);
            siftDown(minChildIndex, end, arr);
        }
    }
}