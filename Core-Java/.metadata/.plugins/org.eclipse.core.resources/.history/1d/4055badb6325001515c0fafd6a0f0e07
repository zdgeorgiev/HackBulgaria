import java.util.ArrayList;
import java.util.Scanner;

public class MinMaxHeap {

    public static class Node {

        public int value;
        public Node left;
        public Node right;
    }

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);
        int n = s.nextInt();

        ArrayList<MinMaxHeap.Node> nodes = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            MinMaxHeap.Node currentNode = new MinMaxHeap.Node();
            currentNode.value = s.nextInt();
            nodes.add(currentNode);
        }

        for (int i = 0; i < n; i++) {
            if (2 * i + 1 < n) {
                nodes.get(i).left = nodes.get(2 * i + 1);
            }
            if (2 * i + 2 < n) {
                nodes.get(i).right = nodes.get(2 * i + 2);
            }
        }

        System.out.println(new BST().isBST(nodes.get(0)) ? "YES" : "NO");
    }

    // Checks if a binary tree is a min/max heap.
    public boolean isMinMax(Node root) {
        return minMaxHeapUtil(root, Integer.MIN_VALUE, Integer.MAX_VALUE, 1);
    }

    private static boolean minMaxHeapUtil(Node currentNode, int minValue, int maxValue, int level) {

        if (currentNode == null) {
            return true;
        }

        boolean isInRange = currentNode.value >= minValue && currentNode.value < maxValue;

        if ((level & 1) == 0) {
            maxValue = currentNode.value;
        } else {
            minValue = currentNode.value;
        }

        return isInRange && minMaxHeapUtil(currentNode.left, minValue, maxValue, level + 1)
                && minMaxHeapUtil(currentNode.right, minValue, maxValue, level + 1);
    }
}