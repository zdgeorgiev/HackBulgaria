import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;

public class ValidDirectories {

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        Graph.Node seven = new Graph.Node("7");
        Graph.Node five = new Graph.Node("5");
        Graph.Node three = new Graph.Node("3");
        Graph.Node eleven = new Graph.Node("11");
        Graph.Node eight = new Graph.Node("8");
        Graph.Node two = new Graph.Node("2");
        Graph.Node nine = new Graph.Node("9");
        Graph.Node ten = new Graph.Node("10");
        seven.addEdge(eleven).addEdge(eight);
        five.addEdge(eleven);
        three.addEdge(eight).addEdge(ten);
        eleven.addEdge(two).addEdge(nine).addEdge(ten);
        eight.addEdge(nine).addEdge(ten);

        Graph.Node[] allNodes = { seven, five, three, eleven, eight, two, nine, ten };
        // L <- Empty list that will contain the sorted elements
        ArrayList<Graph.Node> L = new ArrayList<Graph.Node>();

        // S <- Set of all nodes with no incoming edges
        HashSet<Graph.Node> S = new HashSet<Graph.Node>();
        for (Graph.Node n : allNodes) {
            if (n.inEdges.size() == 0) {
                S.add(n);
            }
        }

        // while S is non-empty do
        while (!S.isEmpty()) {
            // remove a node n from S
            Graph.Node n = S.iterator().next();
            S.remove(n);

            // insert n into L
            L.add(n);

            // for each node m with an edge e from n to m do
            for (Iterator<Graph.Edge> it = n.outEdges.iterator(); it.hasNext();) {
                // remove edge e from the graph
                Graph.Edge e = it.next();
                Graph.Node m = e.to;
                it.remove();// Remove edge from n
                m.inEdges.remove(e);// Remove edge from m

                // if m has no other incoming edges then insert m into S
                if (m.inEdges.isEmpty()) {
                    S.add(m);
                }
            }
        }
        // Check to see if all edges are removed
        boolean cycle = false;
        for (Graph.Node n : allNodes) {
            if (!n.inEdges.isEmpty()) {
                cycle = true;
                break;
            }
        }
        if (cycle) {
            System.out.println("Cycle present, topological sort not possible");
        } else {
            System.out.println("Topological Sort: " + Arrays.toString(L.toArray()));
        }
    }
}
