import java.util.HashMap;
import java.util.Scanner;

public class dd {

    private static Trie trie = new Trie();
    
    public statitc class Trie {
        private Node head;

        public Trie() {
            this.head = new Node();
        }

        public static class Node {

            public boolean isWord;
            public HashMap<Character, Node> childs;

            public Node() {
                this.isWord = false;
                this.childs = new HashMap<Character, Node>();
            }
        }

        public void insert(String word) {
            Node headCpy = head;

            for (int i = 0; i < word.length(); i++) {
                Node nextNode = null;
                char currentChar = word.charAt(i);

                if (headCpy.childs.containsKey(currentChar)) {
                    nextNode = headCpy.childs.get(currentChar);
                } else {
                    headCpy.childs.put(currentChar, new Node());
                    nextNode = headCpy.childs.get(currentChar);
                }

                headCpy = nextNode;
            }

            headCpy.isWord = true;
        }

        public boolean contains(String word) {
            Node headCpy = this.head;

            for (int i = 0; i < word.length(); i++) {
                Node nextNode = null;
                char currentChar = word.charAt(i);

                if (headCpy.childs.containsKey(currentChar)) {
                    nextNode = headCpy.childs.get(currentChar);
                } else {
                    return false;
                }

                headCpy = nextNode;
            }

            return headCpy.isWord;
        }
    }

    private static StringBuilder output = new StringBuilder();

    public static void main(String[] args) {

        Scanner s = new Scanner(System.in);

        int n = s.nextInt();

        for (int i = 0; i < n; i++) {

            String command = s.next();
            String word = s.next();

            switch (command) {
                case "insert":
                    trie.insert(word);
                    break;
                case "contains":
                    output.append(trie.contains(word) + "\n");
                    break;

                default:
                    throw new IllegalArgumentException("Invalid command");
            }
        }

        System.out.print(output.toString());
    }
}
