import java.math.BigInteger;
import java.util.Scanner;

public class NeedleHaystack {

    private static StringBuilder result = new StringBuilder();

    private static final String BASE = "101";

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        String haystack = s.next();
        String needle = s.next();

        rabinKarp(haystack, needle);

        System.out.println(result.toString());
    }

    private static void rabinKarp(String haystack, String needle) {
        int needleLenght = needle.length();

        BigInteger hashHaystack = getHash(haystack, new BigInteger("0"), 0, needleLenght);
        BigInteger hashNeedle = getHash(needle, new BigInteger("0"), 0, needleLenght);

        for (int i = 0; i < haystack.length() - needle.length() - 1; i++) {
            if (hashHaystack.equals(hashNeedle)) {

                if (haystack.substring(i, i + needle.length()).equals(needle)) {
                    result.append(i);
                }
            }

            hashHaystack = getHash(haystack, hashHaystack, i + 1, ++needleLenght);
        }
    }

    private static BigInteger getHash(String needle, BigInteger prevHash, int startIndex, int endIndex) {
        // [101 × (999,509 - (97 × 1012))] + (97 × 1010) = 1,011,309

        BigInteger hash = new BigInteger("0");
        int size = needle.length();

        if (startIndex == 0) {
            for (int i = 0; i < needle.length(); i++) {

                BigInteger currentBasePower = new BigInteger(BASE).pow(size - 1);
                BigInteger currentStep = new BigInteger(getLongFromChar(needle.charAt(i)));

                hash.add(currentStep.multiply(currentBasePower));

                size--;
            }
        } else {

            BigInteger currentBasePower = new BigInteger(BASE).pow(size - 1);
            BigInteger currentStep = new BigInteger(getLongFromChar(needle.charAt(startIndex - 1)));
        }

        return hash;
    }

    private static String getLongFromChar(char c) {
        return String.valueOf(c - '0');
    }
}